# - *- coding: utf- 8 - *-
import asyncio

from aiogram import Router, Bot, F
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from tgbot.database import Funpayx, Itemx, Positionx, Purchasesx
from tgbot.keyboards.inline_admin import close_finl
from tgbot.keyboards.inline_user import refill_method_buy_finl
from tgbot.utils.const_functions import ded, get_unix, gen_id, ikb
from tgbot.utils.misc.bot_models import FSM, ARS

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router(name=__name__)


# –ê–∫—Ç–∏–≤–∞—Ü–∏—è FunPay –∫–æ–¥–∞
@router.message(F.text.startswith('/start fp_'))
async def funpay_activate(message: Message, bot: Bot, state: FSM, arSession: ARS):
    if len(message.text.split('fp_')) < 2:
        return await message.answer(
            "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞</b>\n"
            "‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏"
        )
        
    funpay_code = message.text.split('fp_')[1]
    
    await state.clear()
    
    get_funpay = Funpayx.get(funpay_code=funpay_code)
    
    if get_funpay is None:
        return await message.answer(
            "<b>‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</b>\n"
            "‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        )
    
    if get_funpay.funpay_used == 1:
        return await message.answer(
            "<b>‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</b>\n"
            "‚ùó –û–¥–∏–Ω –∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑"
        )
    
    get_position = Positionx.get(position_id=get_funpay.position_id)
    
    if get_position is None:
        return await message.answer(
            "<b>‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n"
            "‚ùó –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
        )
        
    get_items = Itemx.gets(position_id=get_funpay.position_id)
    
    if len(get_items) == 0:
        return await message.answer(
            "<b>‚ùå –¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å</b>\n"
            "‚ùó –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã–¥–∞—á–∏
    get_buy_items = get_items[:1]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
    
    # –°–æ–∑–¥–∞–µ–º —á–µ–∫ –ø–æ–∫—É–ø–∫–∏
    purchase_receipt = gen_id(10)
    purchase_data = "\n".join([item.item_data for item in get_buy_items])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É
    Purchasesx.add(
        user_id=message.from_user.id,
        user_balance_before=0,
        user_balance_after=0,
        purchase_receipt=purchase_receipt,
        purchase_data=purchase_data,
        purchase_count=1,
        purchase_price=0,
        purchase_price_one=0,
        purchase_position_id=get_position.position_id,
        purchase_position_name=get_position.position_name,
        purchase_category_id=get_position.category_id,
        purchase_category_name="FunPay",
    )
    
    # –£–¥–∞–ª—è–µ–º –≤—ã–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    for item in get_buy_items:
        Itemx.delete(item_id=item.item_id)
    
    # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    Funpayx.update(get_funpay.funpay_code, funpay_used=1, funpay_user_id=message.from_user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    await message.answer(
        ded(f"""
            <b>üéÅ –í–∞—à —Ç–æ–≤–∞—Ä:</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            {purchase_data}
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            üì¶ –ß–µ–∫: <code>#{purchase_receipt}</code>
            üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>0‚ÇΩ (–û–ø–ª–∞—á–µ–Ω–æ —á–µ—Ä–µ–∑ FunPay)</code>
        """)
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await asyncio.sleep(1)
    
    await message.answer(
        ded(f"""
            <b>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!</b>

            <b>üöÄ –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –ø–æ–∫—É–ø–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é —É –Ω–∞—Å:</b>
            ‚úÖ <b>–¶–µ–Ω—ã –ù–ò–ñ–ï</b> —á–µ–º –Ω–∞ FunPay
            ‚úÖ <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤—ã–¥–∞—á–∞</b> —Ç–æ–≤–∞—Ä–∞ 24/7
            ‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b> –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            ‚úÖ <b>–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤</b> –∏ –∫—ç—à–±—ç–∫–∞
            ‚úÖ <b>–ì–∞—Ä–∞–Ω—Ç–∏—è</b> –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            ‚úÖ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–Ω–ª–∞–π–Ω</b> 24/7

            <b>üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–µ:</b>
            ‚ñ™Ô∏è –°–∫–∏–¥–∫–∏ –¥–æ 30% –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç 500‚ÇΩ
            ‚ñ™Ô∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ –æ—Ç–∑—ã–≤—ã
            ‚ñ™Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - –¥–æ 15% —Å –¥—Ä—É–∑–µ–π
            ‚ñ™Ô∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏

            <b>üí∞ –ë–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ:</b>
            üî∑ CryptoBot - 0% –∫–æ–º–∏—Å—Å–∏–∏
            üîÆ –ÆMoney - –æ—Ç 0.5% –∫–æ–º–∏—Å—Å–∏–∏

            <b>üéÅ –ë–æ–ª–µ–µ 1000 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏!</b>
            ‚Ä¢ –ò–≥—Ä—ã Steam, Origin, Uplay
            ‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Å–æ—Ñ—Ç
            ‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ –∏ –∫–ª—é—á–∏
            ‚Ä¢ –¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã

            <i>üí´ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ç—ã—Å—è—á–∞–º –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!</i>
        """),
        reply_markup=refill_method_buy_finl()
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ FunPay
def funpay_links_finl() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        ikb("üì¶ –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", data="funpay_create"),
    ).row(
        ikb("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", data="funpay_stats"),
        ikb("üé´ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏", data="funpay_list"),
    ).row(
        ikb("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", data="close_this"),
    )
    
    return keyboard.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π admin_products —Ä–æ—É—Ç–µ—Ä)
@router.callback_query(F.data == "funpay_create")
async def funpay_create_start(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await state.set_state("here_funpay_position")
    
    await call.message.edit_text(
        "<b>üé´ –°–æ–∑–¥–∞–Ω–∏–µ FunPay —Å—Å—ã–ª–∫–∏</b>\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "‚ñ™Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏\n"
        "‚ñ™Ô∏è ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ ID –ø–æ–∑–∏—Ü–∏–∏
@router.message(F.text, StateFilter('here_funpay_position'))
async def funpay_create_position_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    if not message.text.isdigit():
        return await message.answer(
            "<b>‚ùå ID –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>\n"
            "‚ñ™Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏"
        )
    
    position_id = int(message.text)
    get_position = Positionx.get(position_id=position_id)
    
    if get_position is None:
        return await message.answer(
            "<b>‚ùå –ü–æ–∑–∏—Ü–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n"
            "‚ñ™Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏"
        )
    
    await state.update_data(here_funpay_position_id=position_id)
    await state.set_state("here_funpay_amount")
    
    await message.answer(
        "<b>üé´ –°–æ–∑–¥–∞–Ω–∏–µ FunPay —Å—Å—ã–ª–∫–∏</b>\n"
        f"‚ñ™Ô∏è –ü–æ–∑–∏—Ü–∏—è: <code>{get_position.position_name}</code>\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "‚ñ™Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –Ω–∞ FunPay\n"
        "‚ñ™Ô∏è –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)"
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
@router.message(F.text, StateFilter('here_funpay_amount'))
async def funpay_create_amount_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    from tgbot.utils.const_functions import is_number, to_number
    
    if not is_number(message.text):
        return await message.answer(
            "<b>‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>\n"
            "‚ñ™Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –Ω–∞ FunPay"
        )
    
    amount = to_number(message.text)
    state_data = await state.get_data()
    position_id = state_data['here_funpay_position_id']
    
    get_position = Positionx.get(position_id=position_id)
    
    # –°–æ–∑–¥–∞–µ–º FunPay –∫–æ–¥
    funpay_code = Funpayx.add(position_id, amount)
    
    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    get_bot = await bot.get_me()
    funpay_link = f"https://t.me/{get_bot.username}?start=fp_{funpay_code}"
    
    await state.clear()
    
    await message.answer(
        ded(f"""
            <b>üé´ FunPay —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ñ™Ô∏è –¢–æ–≤–∞—Ä: <code>{get_position.position_name}</code>
            ‚ñ™Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{amount}‚ÇΩ</code>
            ‚ñ™Ô∏è –°—Å—ã–ª–∫–∞: <code>{funpay_link}</code>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            <b>üìã –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
            1. –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä –Ω–∞ FunPay
            2. –í –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É
            3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Ç–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """),
        reply_markup=close_finl()
    )